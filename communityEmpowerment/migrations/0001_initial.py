# Generated by Django 5.0.7 on 2025-03-04 11:52

import communityEmpowerment.models
import dirtyfields.dirtyfields
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Banner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('image', models.ImageField(blank=True, null=True, storage=communityEmpowerment.models.MediaStorage(), upload_to='banners/')),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Beneficiary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('beneficiary_type', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'verbose_name': 'Beneficiary',
                'verbose_name_plural': 'Beneficiaries',
                'ordering': ['beneficiary_type'],
            },
        ),
        migrations.CreateModel(
            name='Benefit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('benefit_type', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Benefit',
                'verbose_name_plural': 'Benefits',
                'ordering': ['benefit_type'],
            },
        ),
        migrations.CreateModel(
            name='CompanyMeta',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('tagline', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
                ('whatsapp_number', models.CharField(blank=True, max_length=20, null=True)),
                ('support_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('address_line1', models.CharField(blank=True, max_length=255, null=True)),
                ('address_line2', models.CharField(blank=True, max_length=255, null=True)),
                ('city', models.CharField(blank=True, max_length=100, null=True)),
                ('state', models.CharField(blank=True, max_length=100, null=True)),
                ('country', models.CharField(blank=True, max_length=100, null=True)),
                ('postal_code', models.CharField(blank=True, max_length=20, null=True)),
                ('facebook_url', models.URLField(blank=True, null=True)),
                ('twitter_url', models.URLField(blank=True, null=True)),
                ('linkedin_url', models.URLField(blank=True, null=True)),
                ('instagram_url', models.URLField(blank=True, null=True)),
                ('youtube_url', models.URLField(blank=True, null=True)),
                ('business_hours', models.JSONField(blank=True, null=True)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='company_meta/')),
                ('favicon', models.ImageField(blank=True, null=True, upload_to='company_meta/')),
            ],
            options={
                'verbose_name': 'Company Meta',
                'verbose_name_plural': 'Company Meta',
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('department_name', models.CharField(blank=True, max_length=255, null=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Department',
                'verbose_name_plural': 'Departments',
                'ordering': ['department_name'],
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('document_name', models.CharField(blank=True, max_length=255, null=True)),
                ('requirements', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Document',
                'verbose_name_plural': 'Documents',
                'ordering': ['document_name'],
            },
        ),
        migrations.CreateModel(
            name='FAQ',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.TextField()),
                ('answer', models.TextField()),
                ('is_active', models.BooleanField(default=True)),
                ('order', models.IntegerField(default=0)),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='LayoutItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('column_name', models.CharField(choices=[('schemes', 'Schemes'), ('scholarships', 'Scholarships'), ('jobs', 'Jobs')], max_length=20, unique=True)),
                ('is_active', models.BooleanField(default=False)),
                ('order', models.IntegerField(default=0)),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='ProfileField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('field_type', models.CharField(choices=[('char', 'Text'), ('integer', 'Integer'), ('boolean', 'Boolean'), ('decimal', 'Decimal'), ('date', 'Date'), ('choice', 'Choice')], max_length=50)),
                ('is_required', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=False)),
                ('placeholder', models.CharField(blank=True, max_length=255, null=True)),
                ('min_value', models.IntegerField(blank=True, help_text='Minimum value for integer fields.', null=True)),
                ('max_value', models.IntegerField(blank=True, help_text='Maximum value for integer fields.', null=True)),
                ('position', models.IntegerField(default=1)),
            ],
        ),
        migrations.CreateModel(
            name='Sponsor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('sponsor_type', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'verbose_name': 'Sponsor',
                'verbose_name_plural': 'Sponsors',
                'ordering': ['sponsor_type'],
            },
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('state_name', models.CharField(max_length=255, unique=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'State',
                'verbose_name_plural': 'States',
                'ordering': ['state_name'],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('weight', models.FloatField(default=1.0)),
                ('category', models.CharField(choices=[('scholarship', 'Scholarship'), ('job', 'Job Opening'), ('sc', 'Scheduled Caste (SC)'), ('st', 'Scheduled Tribe (ST)'), ('obc', 'Other Backward Classes (OBC)'), ('minority', 'Minority Community'), ('general', 'General')], default='general', max_length=50)),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
                'ordering': ['name'],
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, models.Model),
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(max_length=150, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('profile_field_value', models.JSONField(blank=True, null=True)),
                ('is_email_verified', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Organisation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('organisation_name', models.CharField(blank=True, max_length=255, null=True)),
                ('department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='organisations', to='communityEmpowerment.department')),
            ],
            options={
                'verbose_name': 'Organisation',
                'verbose_name_plural': 'Organisations',
                'ordering': ['organisation_name'],
            },
        ),
        migrations.CreateModel(
            name='ProfileFieldChoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=100)),
                ('is_active', models.BooleanField(default=False)),
                ('field', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='choices', to='communityEmpowerment.profilefield')),
            ],
        ),
        migrations.CreateModel(
            name='ProfileFieldValue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, null=True)),
                ('field', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='communityEmpowerment.profilefield')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='profile_field_values', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SavedFilter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('criteria', models.JSONField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Scheme',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('title', models.TextField(blank=True, null=True)),
                ('introduced_on', models.TextField(blank=True, null=True)),
                ('valid_upto', models.TextField(blank=True, null=True)),
                ('funding_pattern', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('scheme_link', models.URLField(blank=True, null=True)),
                ('pdf_url', models.URLField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('benefits', models.ManyToManyField(blank=True, related_name='schemes', to='communityEmpowerment.benefit')),
                ('department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='schemes', to='communityEmpowerment.department')),
            ],
            options={
                'verbose_name': 'Scheme',
                'verbose_name_plural': 'Schemes',
                'ordering': ['introduced_on'],
            },
        ),
        migrations.CreateModel(
            name='Procedure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('step_description', models.TextField(blank=True, null=True)),
                ('scheme', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='procedures', to='communityEmpowerment.scheme')),
            ],
            options={
                'verbose_name': 'Procedure',
                'verbose_name_plural': 'Procedures',
                'ordering': ['scheme'],
            },
        ),
        migrations.CreateModel(
            name='Criteria',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('description', models.TextField(blank=True, null=True)),
                ('value', models.TextField(blank=True, null=True)),
                ('criteria_data', models.JSONField(blank=True, null=True)),
                ('scheme', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='criteria', to='communityEmpowerment.scheme')),
            ],
            options={
                'verbose_name': 'Criteria',
                'verbose_name_plural': 'Criteria',
                'ordering': ['description'],
            },
        ),
        migrations.AddField(
            model_name='customuser',
            name='saved_schemes',
            field=models.ManyToManyField(related_name='saved_by_users', to='communityEmpowerment.scheme'),
        ),
        migrations.CreateModel(
            name='SchemeBeneficiary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('beneficiary', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='beneficiary_schemes', to='communityEmpowerment.beneficiary')),
                ('scheme', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scheme_beneficiaries', to='communityEmpowerment.scheme')),
            ],
            options={
                'verbose_name': 'Scheme Beneficiary',
                'verbose_name_plural': 'Scheme Beneficiaries',
                'ordering': ['scheme', 'beneficiary'],
            },
        ),
        migrations.AddField(
            model_name='scheme',
            name='beneficiaries',
            field=models.ManyToManyField(related_name='schemes', through='communityEmpowerment.SchemeBeneficiary', to='communityEmpowerment.beneficiary'),
        ),
        migrations.CreateModel(
            name='SchemeDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='document_schemes', to='communityEmpowerment.document')),
                ('scheme', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scheme_documents', to='communityEmpowerment.scheme')),
            ],
            options={
                'verbose_name': 'Scheme Document',
                'verbose_name_plural': 'Scheme Documents',
                'ordering': ['scheme', 'document'],
            },
        ),
        migrations.AddField(
            model_name='scheme',
            name='documents',
            field=models.ManyToManyField(related_name='schemes', through='communityEmpowerment.SchemeDocument', to='communityEmpowerment.document'),
        ),
        migrations.CreateModel(
            name='SchemeFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feedback', models.TextField()),
                ('rating', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('scheme', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedbacks', to='communityEmpowerment.scheme')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scheme_feedbacks', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SchemeReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scheme_id', models.IntegerField()),
                ('report_category', models.CharField(choices=[('incorrect_info', 'Incorrect Information'), ('outdated_info', 'Outdated Information'), ('other', 'Other')], max_length=50)),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SchemeSponsor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('scheme', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scheme_sponsors', to='communityEmpowerment.scheme')),
                ('sponsor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sponsor_schemes', to='communityEmpowerment.sponsor')),
            ],
            options={
                'verbose_name': 'Scheme Sponsor',
                'verbose_name_plural': 'Scheme Sponsors',
                'ordering': ['scheme', 'sponsor'],
            },
        ),
        migrations.AddField(
            model_name='scheme',
            name='sponsors',
            field=models.ManyToManyField(related_name='schemes', through='communityEmpowerment.SchemeSponsor', to='communityEmpowerment.sponsor'),
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resource_link', models.URLField()),
                ('state', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='resources', to='communityEmpowerment.state')),
            ],
        ),
        migrations.AddField(
            model_name='department',
            name='state',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='departments', to='communityEmpowerment.state'),
        ),
        migrations.AddField(
            model_name='scheme',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='schemes', to='communityEmpowerment.tag'),
        ),
        migrations.CreateModel(
            name='UserEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(max_length=50)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('scheme', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='communityEmpowerment.scheme')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserEvents',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('view', 'Scheme View'), ('filter', 'Filter Applied'), ('search', 'Search Query'), ('sort', 'Sorting Action'), ('apply', 'External Apply'), ('save', 'Save'), ('download', 'Download'), ('share', 'Share'), ('error', 'Error Event')], max_length=20)),
                ('scheme_id', models.IntegerField(blank=True, null=True)),
                ('details', models.JSONField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.CharField(blank=True, max_length=255, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserInteraction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interaction_value', models.FloatField(default=1.0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('scheme', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='communityEmpowerment.scheme')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='WebsiteFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(choices=[('bug', 'Bug Report'), ('improvement', 'Improvement Suggestion'), ('general', 'General Feedback')], max_length=50)),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
